module TailwindHalogen where
import Tailwind.Class.Appendable (SkipAppendable, class Appendable)
import Tailwind.Class.MapPrefix (class MapPrefix)
import Data.Symbol (class IsSymbol)
import Halogen.HTML (IProp)
import Tailwind.Halogen as H
css :: ∀ tw a r i. IsSymbol a => tw a -> IProp (class :: String | r) i
css = H.css
data Tw :: Symbol -> Type
data Tw a = Tw
merge :: forall a b c. Appendable a b c => Tw a -> Tw b -> Tw c
merge _ _ = Tw
infixr 5 merge as ~
tw :: Tw SkipAppendable
tw = Tw
halogen_red :: Tw "halogen-red"
halogen_red = Tw
sm :: ∀ a b . MapPrefix "sm:" a b => Tw a -> Tw b 
sm _ = Tw
md :: ∀ a b . MapPrefix "md:" a b => Tw a -> Tw b 
md _ = Tw
lg :: ∀ a b . MapPrefix "lg:" a b => Tw a -> Tw b 
lg _ = Tw
xl :: ∀ a b . MapPrefix "xl:" a b => Tw a -> Tw b 
xl _ = Tw
_2xl :: ∀ a b . MapPrefix "2xl:" a b => Tw a -> Tw b 
_2xl _ = Tw
hover :: ∀ a b . MapPrefix "hover:" a b => Tw a -> Tw b 
hover _ = Tw
focus :: ∀ a b . MapPrefix "focus:" a b => Tw a -> Tw b 
focus _ = Tw
focus_within :: ∀ a b . MapPrefix "focus-within:" a b => Tw a -> Tw b 
focus_within _ = Tw
focus_visible :: ∀ a b . MapPrefix "focus-visible:" a b => Tw a -> Tw b 
focus_visible _ = Tw
active :: ∀ a b . MapPrefix "active:" a b => Tw a -> Tw b 
active _ = Tw
visited :: ∀ a b . MapPrefix "visited:" a b => Tw a -> Tw b 
visited _ = Tw
target :: ∀ a b . MapPrefix "target:" a b => Tw a -> Tw b 
target _ = Tw
first :: ∀ a b . MapPrefix "first:" a b => Tw a -> Tw b 
first _ = Tw
last :: ∀ a b . MapPrefix "last:" a b => Tw a -> Tw b 
last _ = Tw
only :: ∀ a b . MapPrefix "only:" a b => Tw a -> Tw b 
only _ = Tw
odd :: ∀ a b . MapPrefix "odd:" a b => Tw a -> Tw b 
odd _ = Tw
even :: ∀ a b . MapPrefix "even:" a b => Tw a -> Tw b 
even _ = Tw
first_of_type :: ∀ a b . MapPrefix "first-of-type:" a b => Tw a -> Tw b 
first_of_type _ = Tw
last_of_type :: ∀ a b . MapPrefix "last-of-type:" a b => Tw a -> Tw b 
last_of_type _ = Tw
only_of_type :: ∀ a b . MapPrefix "only-of-type:" a b => Tw a -> Tw b 
only_of_type _ = Tw
empty :: ∀ a b . MapPrefix "empty:" a b => Tw a -> Tw b 
empty _ = Tw
disabled :: ∀ a b . MapPrefix "disabled:" a b => Tw a -> Tw b 
disabled _ = Tw
enabled :: ∀ a b . MapPrefix "enabled:" a b => Tw a -> Tw b 
enabled _ = Tw
checked :: ∀ a b . MapPrefix "checked:" a b => Tw a -> Tw b 
checked _ = Tw
indeterminate :: ∀ a b . MapPrefix "indeterminate:" a b => Tw a -> Tw b 
indeterminate _ = Tw
default :: ∀ a b . MapPrefix "default:" a b => Tw a -> Tw b 
default _ = Tw
required :: ∀ a b . MapPrefix "required:" a b => Tw a -> Tw b 
required _ = Tw
valid :: ∀ a b . MapPrefix "valid:" a b => Tw a -> Tw b 
valid _ = Tw
invalid :: ∀ a b . MapPrefix "invalid:" a b => Tw a -> Tw b 
invalid _ = Tw
in_range :: ∀ a b . MapPrefix "in-range:" a b => Tw a -> Tw b 
in_range _ = Tw
out_of_range :: ∀ a b . MapPrefix "out-of-range:" a b => Tw a -> Tw b 
out_of_range _ = Tw
placeholder_shown :: ∀ a b . MapPrefix "placeholder-shown:" a b => Tw a -> Tw b 
placeholder_shown _ = Tw
autofill :: ∀ a b . MapPrefix "autofill:" a b => Tw a -> Tw b 
autofill _ = Tw
read_only :: ∀ a b . MapPrefix "read-only:" a b => Tw a -> Tw b 
read_only _ = Tw
before :: ∀ a b . MapPrefix "before:" a b => Tw a -> Tw b 
before _ = Tw
after :: ∀ a b . MapPrefix "after:" a b => Tw a -> Tw b 
after _ = Tw
first_letter :: ∀ a b . MapPrefix "first-letter:" a b => Tw a -> Tw b 
first_letter _ = Tw
first_line :: ∀ a b . MapPrefix "first-line:" a b => Tw a -> Tw b 
first_line _ = Tw
marker :: ∀ a b . MapPrefix "marker:" a b => Tw a -> Tw b 
marker _ = Tw
selection :: ∀ a b . MapPrefix "selection:" a b => Tw a -> Tw b 
selection _ = Tw
file :: ∀ a b . MapPrefix "file:" a b => Tw a -> Tw b 
file _ = Tw
backdrop :: ∀ a b . MapPrefix "backdrop:" a b => Tw a -> Tw b 
backdrop _ = Tw
placeholder :: ∀ a b . MapPrefix "placeholder:" a b => Tw a -> Tw b 
placeholder _ = Tw
max_sm :: ∀ a b . MapPrefix "max-sm:" a b => Tw a -> Tw b 
max_sm _ = Tw
max_md :: ∀ a b . MapPrefix "max-md:" a b => Tw a -> Tw b 
max_md _ = Tw
max_lg :: ∀ a b . MapPrefix "max-lg:" a b => Tw a -> Tw b 
max_lg _ = Tw
max_xl :: ∀ a b . MapPrefix "max-xl:" a b => Tw a -> Tw b 
max_xl _ = Tw
max_2xl :: ∀ a b . MapPrefix "max-2xl:" a b => Tw a -> Tw b 
max_2xl _ = Tw
dark :: ∀ a b . MapPrefix "dark:" a b => Tw a -> Tw b 
dark _ = Tw
portrait :: ∀ a b . MapPrefix "portrait:" a b => Tw a -> Tw b 
portrait _ = Tw
landscape :: ∀ a b . MapPrefix "landscape:" a b => Tw a -> Tw b 
landscape _ = Tw
motion_safe :: ∀ a b . MapPrefix "motion-safe:" a b => Tw a -> Tw b 
motion_safe _ = Tw
motion_reduce :: ∀ a b . MapPrefix "motion-reduce:" a b => Tw a -> Tw b 
motion_reduce _ = Tw
contrast_more :: ∀ a b . MapPrefix "contrast-more:" a b => Tw a -> Tw b 
contrast_more _ = Tw
contrast_less :: ∀ a b . MapPrefix "contrast-less:" a b => Tw a -> Tw b 
contrast_less _ = Tw
print :: ∀ a b . MapPrefix "print:" a b => Tw a -> Tw b 
print _ = Tw
aria_checked :: ∀ a b . MapPrefix "aria-checked:" a b => Tw a -> Tw b 
aria_checked _ = Tw
aria_disabled :: ∀ a b . MapPrefix "aria-disabled:" a b => Tw a -> Tw b 
aria_disabled _ = Tw
aria_expanded :: ∀ a b . MapPrefix "aria-expanded:" a b => Tw a -> Tw b 
aria_expanded _ = Tw
aria_hidden :: ∀ a b . MapPrefix "aria-hidden:" a b => Tw a -> Tw b 
aria_hidden _ = Tw
aria_pressed :: ∀ a b . MapPrefix "aria-pressed:" a b => Tw a -> Tw b 
aria_pressed _ = Tw
aria_readonly :: ∀ a b . MapPrefix "aria-readonly:" a b => Tw a -> Tw b 
aria_readonly _ = Tw
aria_required :: ∀ a b . MapPrefix "aria-required:" a b => Tw a -> Tw b 
aria_required _ = Tw
aria_selected :: ∀ a b . MapPrefix "aria-selected:" a b => Tw a -> Tw b 
aria_selected _ = Tw
rtl :: ∀ a b . MapPrefix "rtl:" a b => Tw a -> Tw b 
rtl _ = Tw
ltr :: ∀ a b . MapPrefix "ltr:" a b => Tw a -> Tw b 
ltr _ = Tw
open :: ∀ a b . MapPrefix "open:" a b => Tw a -> Tw b 
open _ = Tw